<?php

namespace DIQA\ChemExtension\Experiments;

use DIQA\ChemExtension\Pages\ChemForm;
use DIQA\ChemExtension\Pages\ChemFormRepository;
use MediaWiki\MediaWikiServices;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;

class ExperimentXlsImporter
{

    private $workSheet;
    private $beginCoord;
    private $chemFormRepo;
    private $nonExistingMolecules;

    public function __construct(Worksheet $workSheet)
    {
        $this->workSheet = $workSheet;
        $this->beginCoord = $this->findBegin();
        $dbr = MediaWikiServices::getInstance()->getDBLoadBalancer()->getConnection(DB_REPLICA);
        $this->chemFormRepo = new ChemFormRepository($dbr);
        $this->nonExistingMolecules = [];
    }

    private function findBegin() {
        for($row = 1; $row < 100; $row++) {
            for($column = 1; $column < 100; $column++) {

                if ($this->workSheet->getCell([$column, $row])->getValue() === '--investigation--') {
                    return [$column, $row+1];
                }
            }
        }
        return [1,1];
    }

    private function readHeaderLine($maxColumn = 100) {
        $properties = [];
        list($column, $startRow) = $this->beginCoord;

        for($i = $column; $i < $column + $maxColumn; $i++) {
            $property = $this->workSheet->getCell([$i, $startRow])->getValue();
            if (trim($property) !== '') {
                $properties[] = $property;
            }
        }
        return $properties;
    }

    private function readLine($row, $numColumns) {
        $cellValues = [];
        list($column, $startRow) = $this->beginCoord;

        for($i = $column; $i <= $column + $numColumns; $i++) {
            $cellValues[] = $this->workSheet->getCell([$i, $startRow + $row])->getValue();
        }
        return $cellValues;
    }

    public function getDataToImport($experimentName): array
    {
        $this->nonExistingMolecules = [];
        $experimentType = ExperimentRepository::getInstance()->getExperimentType($experimentName);
        $properties = $experimentType->getProperties();

        $mainTemplate = $experimentType->getMainTemplate();
        $rowTemplate = $experimentType->getRowTemplate();
        $wikitext = "{{".$mainTemplate."|experiments=";
        $headerLine = $this->readHeaderLine();

        $row = 1;
        do {
            $values = $this->readLine($row, count($headerLine));

            $rowNotEmpty = count(array_filter($values, fn($e) => trim($e) !== '')) > 0;
            if ($rowNotEmpty) {
                $wikitext .= "{{" . $rowTemplate;
                $valIndex = 0;
                foreach ($headerLine as $property) {
                    if (trim($values[$valIndex]) === '') {
                        $valIndex++;
                        continue;
                    }
                    if (in_array($property, $experimentType->getAutoGeneratedProperties())) {
                        $valIndex++;
                        continue;
                    }
                    if (strpos(trim($values[$valIndex]), "[inchikey]") === 0) {
                        $value = $this->getChemformId($values[$valIndex]);
                    } else {
                        $value = $values[$valIndex];
                    }

                    $wikitext .= "\n|{$properties[$property]}={$value}";
                    $valIndex++;
                }
                $wikitext .= "\n}}";
            }
            $row++;
        } while($rowNotEmpty);

        $wikitext .= "\n}}";
        return [
            'nonExistingMolecules' => $this->nonExistingMolecules,
            'wikitext' => $wikitext
        ];
    }

    private function getChemformId($cellValue)
    {
        $lines = explode("\n", $cellValue);
        $firstLine = reset($lines);
        $moleculeKey = trim(str_replace('[inchikey]', '', $firstLine));
        $chemFormId = $this->chemFormRepo->getChemFormId($moleculeKey);
        if (is_null($chemFormId)) {
            $this->nonExistingMolecules[] = ChemForm::fromMolOrRxn($cellValue, "", "", $moleculeKey);
            return $moleculeKey;
        }
        return "Molecule:$chemFormId";
    }


}
